{"version":3,"sources":["components/board.jsx","App.js","index.js"],"names":["Board","useState","winner","setWinner","isX","setTurn","board","setBoard","currentPlayer","nextMove","row","column","tmpBoard","result","checkWinner","scores","X","O","tie","minimax","depth","isMaximizing","maxS","i","j","Math","max","minS","min","arr","checkTrio","a","b","c","movesLeft","hidden","toUpperCase","className","onClick","move","bestScore","score","aiMove","map","rowIndex","tile","columnIndex","BoardTile","key","tileClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAEe,SAASA,IAAS,IAAD,EACFC,mBAAS,IADP,mBACvBC,EADuB,KACfC,EADe,OAEPF,oBAAS,GAFF,mBAEvBG,EAFuB,KAElBC,EAFkB,OAGJJ,mBAAS,CACjC,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,MANmB,mBAGvBK,EAHuB,KAGhBC,EAHgB,KAS9B,SAASC,IACP,OAAOJ,EAAM,IAAM,IAGrB,SAASK,EAASC,EAAKC,GACrB,IAAIC,EAAQ,YAAON,GACnB,GAA8B,KAA1BM,EAASF,GAAKC,GAAgB,CAChCC,EAASF,GAAKC,GAAUH,IACxBH,GAASD,GACTG,EAASK,GACT,IAAIC,EAASC,EAAYR,GACX,MAAVO,GACFV,EAAUU,IAyBhB,IAAME,EAAS,CAAEC,EAAGZ,EAAM,KAAO,IAAKa,EAAGb,GAAO,IAAM,IAAKc,IAAK,GAEhE,SAASC,EAAQb,EAAOc,EAAOC,GAC7B,IAAIR,EAASC,EAAYR,GACzB,GAAe,OAAXO,EAAiB,OAAOE,EAAOF,GAEnC,GAAIQ,EAAc,CAEhB,IADA,IAAIC,GAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACD,KAAhBlB,EAAMiB,GAAGC,KACXlB,EAAMiB,GAAGC,GAAKhB,IACdc,EAAOG,KAAKC,IAAIJ,EAAMH,EAAQb,EAAOc,KAAS,IAAUA,EACxDd,EAAMiB,GAAGC,GAAK,IAIpB,OAAOF,EAGP,IADA,IAAIK,EAAO,IACFJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACD,KAAhBlB,EAAMiB,GAAGC,KACXlB,EAAMiB,GAAGC,GAAKpB,EAAM,IAAM,IAC1BuB,EAAOF,KAAKG,IAAID,EAAMR,EAAQb,EAAOc,KAAS,IAASA,EACvDd,EAAMiB,GAAGC,GAAK,IAIpB,OAAOG,EAeX,SAASb,EAAYe,GACnB,IAAI3B,EAAS,KACb,SAAS4B,EAAUC,EAAGC,EAAGC,GACnBF,IAAMC,GAAKA,IAAMC,GAAW,KAANF,IAAU7B,EAAS6B,GAc/C,OAXAD,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IACvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IACvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IAEvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IACvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IACvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IAEvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IACvCC,EAAUD,EAAI,GAAG,GAAIA,EAAI,GAAG,GAAIA,EAAI,GAAG,IAEzB,MAAV3B,GAKN,WACE,IAAK,IAAIqB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAErB,GAAoB,KAAhBlB,EAAMiB,GAAGC,GAAW,OAAO,EAGnC,OAAO,EAXFU,GADsBhC,EACF,MAc3B,OACE,oCACE,wBAAIiC,OAAmB,KAAXjC,GAAZ,SAAkCM,KAClC,wBAAI2B,OAAmB,KAAXjC,GACE,QAAXA,EAAmB,GAAK,WAD3B,IACwCA,EAAOkC,eAE/C,yBAAKC,UAAU,cACb,4BAAQC,QAAS,kBAvGvB,WAIE,IAFA,IACIC,EADAC,GAAa,IAERjB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAoB,KAAhBlB,EAAMiB,GAAGC,GAAW,CACtBlB,EAAMiB,GAAGC,GAAKhB,IACd,IAAIiC,EAAQtB,EAAQb,EAAO,GAAG,GAC9BA,EAAMiB,GAAGC,GAAK,GACViB,EAAQD,IACVA,EAAYC,EACZF,EAAO,CAAEhB,IAAGC,MAKR,MAARe,GAAc9B,EAAS8B,EAAKhB,EAAGgB,EAAKf,GAsFbkB,KAAvB,WACA,4BAAQJ,QAAS,kBA7CrB/B,EALmB,CACjB,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,MAGXJ,EAAU,SACVE,GAAQ,KA2CJ,UAEF,6BACA,yBAAKgC,UAAU,SACZ/B,EAAMqC,KAAI,SAACjC,EAAKkC,GAAN,OACTlC,EAAIiC,KAAI,SAACE,EAAMC,GAAP,OACN,kBAACC,EAAD,CACEC,IAAG,UAAKJ,GAAL,OAAgBE,GACnBD,KAAMA,EACNI,UAAW,kBAAMxC,EAASmC,EAAUE,cASlD,SAASC,EAAT,GAAyC,IAApBF,EAAmB,EAAnBA,KAAMI,EAAa,EAAbA,UACzB,OACE,yBAAKZ,UAAU,aAAaC,QAASW,GAClCJ,GC5IQK,MATf,WACE,OACE,yBAAKb,UAAU,OACb,2CACA,kBAACrC,EAAD,QCJNmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.70d3f767.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Board() {\n  const [winner, setWinner] = useState(\"\");\n  const [isX, setTurn] = useState(true);\n  const [board, setBoard] = useState([\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ]);\n\n  function currentPlayer() {\n    return isX ? \"X\" : \"O\";\n  }\n\n  function nextMove(row, column) {\n    let tmpBoard = [...board];\n    if (tmpBoard[row][column] === \"\") {\n      tmpBoard[row][column] = currentPlayer();\n      setTurn(!isX);\n      setBoard(tmpBoard);\n      let result = checkWinner(board);\n      if (result != null) {\n        setWinner(result);\n      }\n    }\n  }\n\n  function aiMove() {\n    // best score with minimax algorhitm\n    let bestScore = -100;\n    let move;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] === \"\") {\n          board[i][j] = currentPlayer();\n          let score = minimax(board, 0, false);\n          board[i][j] = \"\";\n          if (score > bestScore) {\n            bestScore = score;\n            move = { i, j };\n          }\n        }\n      }\n    }\n    if (move != null) nextMove(move.i, move.j);\n  }\n\n  const scores = { X: isX ? 100 : -100, O: isX ? -100 : 100, tie: 0 };\n\n  function minimax(board, depth, isMaximizing) {\n    let result = checkWinner(board);\n    if (result !== null) return scores[result];\n\n    if (isMaximizing) {\n      let maxS = -100;\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (board[i][j] === \"\") {\n            board[i][j] = currentPlayer();\n            maxS = Math.max(maxS, minimax(board, depth++, false)) - depth;\n            board[i][j] = \"\";\n          }\n        }\n      }\n      return maxS;\n    } else {\n      let minS = 100;\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (board[i][j] === \"\") {\n            board[i][j] = isX ? \"O\" : \"X\";\n            minS = Math.min(minS, minimax(board, depth++, true)) + depth;\n            board[i][j] = \"\";\n          }\n        }\n      }\n      return minS;\n    }\n  }\n\n  function resetBoard() {\n    const resetArray = [\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"],\n    ];\n    setBoard(resetArray);\n    setWinner(\"\");\n    setTurn(true);\n  }\n\n  function checkWinner(arr) {\n    let winner = null;\n    function checkTrio(a, b, c) {\n      if (a === b && b === c && a !== \"\") winner = a;\n    }\n    /// check for winners in row\n    checkTrio(arr[0][0], arr[0][1], arr[0][2]);\n    checkTrio(arr[1][0], arr[1][1], arr[1][2]);\n    checkTrio(arr[2][0], arr[2][1], arr[2][2]);\n    /// check for winners in columns\n    checkTrio(arr[0][0], arr[1][0], arr[2][0]);\n    checkTrio(arr[0][1], arr[1][1], arr[2][1]);\n    checkTrio(arr[0][2], arr[1][2], arr[2][2]);\n    /// check for winners in diagonals\n    checkTrio(arr[0][0], arr[1][1], arr[2][2]);\n    checkTrio(arr[2][0], arr[1][1], arr[0][2]);\n\n    if (winner != null) return winner;\n    if (!movesLeft()) return \"tie\";\n    return winner;\n  }\n\n  function movesLeft() {\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        // Is the spot available?\n        if (board[i][j] === \"\") return true;\n      }\n    }\n    return false;\n  }\n\n  return (\n    <>\n      <h2 hidden={winner !== \"\"}>Turn: {currentPlayer()}</h2>\n      <h2 hidden={winner === \"\"}>\n        {winner === \"tie\" ? \"\" : \"Winner: \"} {winner.toUpperCase()}\n      </h2>\n      <div className=\"button-row\">\n        <button onClick={() => aiMove()}>AI Turn</button>\n        <button onClick={() => resetBoard()}>Reset</button>\n      </div>\n      <br />\n      <div className=\"board\">\n        {board.map((row, rowIndex) =>\n          row.map((tile, columnIndex) => (\n            <BoardTile\n              key={`${rowIndex}${columnIndex}`}\n              tile={tile}\n              tileClick={() => nextMove(rowIndex, columnIndex)}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction BoardTile({ tile, tileClick }) {\n  return (\n    <div className=\"board-tile\" onClick={tileClick}>\n      {tile}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}