{"version":3,"sources":["components/board.jsx","App.js","index.js"],"names":["Board","useState","winner","setWinner","isX","setTurn","board","setBoard","currentPlayer","scores","X","O","tie","minimax","depth","isMaximizing","result","checkWinner","bestScore","Infinity","i","j","Math","max","min","arr","checkTrio","a","b","c","len","hidden","className","onClick","move","score","console","log","aiMove","map","row","rowIndex","tile","columnIndex","BoardTile","key","tileClick","column","tmpBoard","nextMove","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4876691f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Board() {\n  const [winner, setWinner] = useState(\"\");\n  const [isX, setTurn] = useState(true);\n  const [board, setBoard] = useState([\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ]);\n\n  function currentPlayer() {\n    return isX ? \"X\" : \"O\";\n  }\n\n  function nextMove(row, column) {\n    let tmpBoard = [...board];\n    if (tmpBoard[row][column] === \"\") {\n      tmpBoard[row][column] = currentPlayer();\n      setTurn(!isX);\n      setBoard(tmpBoard);\n      let result = checkWinner(board);\n      if (result != null) {\n        setWinner(result);\n      }\n    }\n  }\n\n  function aiMove() {\n    // best score with minimax algorhitm\n    let bestScore = -Infinity;\n    let move;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        // is spot available\n        if (board[i][j] === \"\") {\n          board[i][j] = currentPlayer();\n          let score = minimax(board, 0, false);\n          board[i][j] = \"\";\n          if (score > bestScore) {\n            bestScore = score;\n            move = { i, j };\n          }\n        }\n      }\n    }\n    if (move != null) {\n      console.log(\"AI turn\");\n      board[move.i][move.j] = currentPlayer();\n      setTurn(!isX);\n      setBoard(board);\n      let result = checkWinner(board);\n      if (result != null) {\n        setWinner(result);\n      }\n    }\n  }\n\n  const scores = { X: 10, O: -10, tie: 0 };\n\n  function minimax(board, depth, isMaximizing) {\n    let result = checkWinner(board);\n    if (result !== null) return scores[result];\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          // Is the spot available?\n          if (board[i][j] === \"\") {\n            board[i][j] = currentPlayer();\n            bestScore = Math.max(bestScore, minimax(board, depth++, false));\n            board[i][j] = \"\";\n          }\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          // Is the spot available?\n          if (board[i][j] === \"\") {\n            board[i][j] = isX ? \"O\" : \"X\";\n            bestScore = Math.min(bestScore, minimax(board, depth++, true));\n            board[i][j] = \"\";\n          }\n        }\n      }\n      return bestScore;\n    }\n  }\n\n  function resetBoard() {\n    const resetArray = [\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"],\n    ];\n    setBoard(resetArray);\n    setWinner(\"\");\n    setTurn(true);\n  }\n\n  function checkWinner(arr) {\n    let winner = null;\n    function checkTrio(a, b, c) {\n      if (a === b && b === c && a !== \"\") winner = a;\n    }\n    /// check for winners in row\n    checkTrio(arr[0][0], arr[0][1], arr[0][2]);\n    checkTrio(arr[1][0], arr[1][1], arr[1][2]);\n    checkTrio(arr[2][0], arr[2][1], arr[2][2]);\n    /// check for winners in columns\n    checkTrio(arr[0][0], arr[1][0], arr[2][0]);\n    checkTrio(arr[0][1], arr[1][1], arr[2][1]);\n    checkTrio(arr[0][2], arr[1][2], arr[2][2]);\n    /// check for winners in diagonals\n    checkTrio(arr[0][0], arr[1][1], arr[2][2]);\n    checkTrio(arr[2][0], arr[1][1], arr[0][2]);\n\n    if (winner != null) return winner;\n    // length of array tiles that does not include  ''\n    let len = 9;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        // Is the spot available?\n        if (board[i][j] === \"\") len--;\n      }\n    }\n    if (len === 9 && winner === null) return \"tie\";\n    return winner;\n  }\n\n  return (\n    <>\n      <h2 hidden={winner !== \"\"}>Turn: {currentPlayer()}</h2>\n      <h2 hidden={winner === \"\"}>Winner: {winner}</h2>\n      <div className=\"button-row\">\n        <button onClick={() => aiMove()}>AI Turn</button>\n        <button onClick={() => resetBoard()}>Reset</button>\n      </div>\n      <br />\n      <div className=\"board\">\n        {board.map((row, rowIndex) =>\n          row.map((tile, columnIndex) => (\n            <BoardTile\n              key={`${rowIndex}${columnIndex}`}\n              tile={tile}\n              tileClick={() => nextMove(rowIndex, columnIndex)}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction BoardTile({ tile, tileClick }) {\n  return (\n    <div className=\"board-tile\" onClick={tileClick}>\n      {tile}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}